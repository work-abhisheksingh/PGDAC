Todays Agenda:
		
		Role of program.cs file-----------------------------------------------------
		Controller map--------------------------------------------------------------
		Default Route---------------------------------------------------------------
		Types Routing--------------------------------------------------------------
		Update action method for ProductsController

		GET http://localhost:8989/products/update/34
		
		POST http://localhost:8989/products/update/34
		



		Ajax and asp.net Controller
		Building DashboardController
		etc.

	dotnet new mvc -o EStoreWebApp





Middleware Pipeline

When you create a new project using one of the built-in templates, 
your project is already supplied with a few calls to add/configure middleware services and then use them. 
This is accomplished by adding the calls to the Program.cs file.


Request Received at Web Application level. 
It is  goes throgh Middleware Layer.
	1.Exception Handling
	2.HSTS Protocol
	3.HTTP Redirect
	4.Static Files
	5.Cookie Policy
	6.Auth
	7.Session
	8......................MVC
	Reverse
Response is sent back 


This Typical order of middleware layers in ASP.NET Core Web Application is very important. 
It is necessary to understand the placement of each request delegate in the pipeline

How It Works?

When an HTTP request comes in, the first request delegate handles that request. It can either pass the request down to the next in line or short-circuit the pipeline by preventing the request from propagating further. This is use very useful across multiple scenarios, e.g. serving static files without the need for authentication, handling exceptions before anything else, etc.

The returned response travels back in the reverse direction back through the pipeline. This allows each component to run code both times: when the request arrives and also when the response is on its way out.


Built-In Middleware

The information below explains how the built-in middleware works, and why the order is important. 
The UseXYZ() methods are merely extension methods that are prefixed with the word “Use” as a useful convention, 
making it easy to discover Middleware components when typing code. 

1.Exception Handling:
2.HSTS & HTTPS Redirection:
3.Static Files:
4.Cookie Policy:
5.Authentication, Authorization & Sessions:
6.MVC & Routing:

In Details about inbuilt middlwares:

1.Exception Handling:

	UseDeveloperExceptionPage() & UseDatabaseErrorPage(): used in development to catch run-time exceptions
	UseExceptionHandler(): used in production for run-time exceptions

Calling these methods first ensures that exceptions are caught in any of the middleware components that follow. 

2.HSTS & HTTPS Redirection:

	UseHsts(): used in production to enable HSTS (HTTP Strict Transport Security Protocol) and enforce HTTPS.
	UseHttpsRedirection(): forces HTTP calls to automatically redirect to equivalent HTTPS addresses.

Calling these methods next ensure that HTTPS can be enforced before resources are served from a web browser.

3.Static Files:
	UseStaticFiles(): used to enable static files, such as HTML, JavaScript, CSS and graphics files. 
			  Called early on to avoid the need for authentication, session or MVC middleware.

Calling this before authentication ensures that static files can be served quickly without unnecessarily triggering authentication middleware. 

4.Cookie Policy:
	UseCookiePolicy(): used to enforce cookie policy and display GDPR-friendly messaging

Calling this before the next set of middleware ensures that the calls that follow can make use of cookies if consented. 


5.Authentication, Authorization & Sessions:
	UseAuthentication(): used to enable authentication and then subsequently allow authorization.
	UseSession(): manually added to the Startup file to enable the Session middleware.

Calling these after cookie authentication (but before the MVC middleware) ensures that cookies can be issued as necessary and that the user can be authenticated before the MVC engine kicks in. 

6.MVC & Routing:
	UseMvc(): 
	enables the use of MVC in your web application, with the ability to customize routes for your MVC application 
	and set other options.

	routes.MapRoute(): 
	set the default route and any custom routes when using MVC.


Routing is a pattern matching system that monitors the incoming request and figures out what to do with that request. Typically, it is a way to serve the user request.

When a user request URLs from the server then URLs are handled by the routing system. The Routing system try to find out the matching route pattern of requeted Url with already registered routes which are map to controller, actions, files, or other items. If there is a matching route entry, then it process the request i.e. serve the resource, otherwise it returns 404 error.

Types of Routing

There are two main ways to define routes in ASP.NET Core:
1.Convention-based Routing
2.Attribute Routing


1.Convention-based Routing
It creates routes based on a series of conventions which represent all the possible routes in your system. Convention-based are defined in the Startup.cs file.


2.Attribute Routing
It creates routes based on attributes placed on controller or action level. Attribute routing provides us more control over the URLs generation patterns which helps us in SEO.



Attribute Routing Tokens
One of the cool thing about ASP.NET Core routing is it's more flexible as compared to ASP.NET MVC5 routing since it provides tokens for [area], [controller], and [action]. These tokens get replaced by their values in the route table.



Mixed Routing
You can use Convention-based Routing and Attribute routing together. Even you should use both together since it's not possible to define attribute route for each and every action or controller. In that case, Convention-based Routing will help you.

Route Constraints
Route Constraints are used to restrict the type of passed value to an action. For example, if you expect an argument id as an integer type, then you have to restrict it to an integer type by using datatype in the curly brackets as {id:int}.

Optional Parameters

You can define your route parameter as optional in routes by adding a question mark (?) to the parameter's constraint as given below:

app.UseMvc(routes =>
{
 routes.MapRoute(
 template: "{controller}/{action}/{id:int?}");
});

Default Values
In addition to route constraints and optional parameters, you can also specify the default values for your route parameters which will be used if values are not provided.

app.UseMvc(routes =>
{
 routes.MapRoute(
 template: "{controller=Home}/{action=Index}/{id:int?}");
});



Service Oriented Architecture

What is a web service?
By definition, a web service is any piece of software that makes itself available over the Internet and standardizes its communication via XML encoding. A client invokes a web service by sending a request (usually in the form of an XML message), and the service sends back an XML response. Web services invoke communication over a network, with HTTP as the most common means of connectivity between the two systems. For many, web services are synonymous with SOA (Services Oriented Architecture) and primarily rely on standards such as XML-RPC and SOAP (Simple Object Access Protocol).  One of the primary criticisms of the web services approach is the degree to which the client and server are coupled to one another; an inherent issue whenever a client is remotely calling a procedure (“RPC”) on a distant system.


Why is a web API not a web service?
In contrast, a typical Web API specifies how software components should interact with each other using the web’s protocol (HTTP) as the go-between. The client doesn’t need to know what procedure to call on the server. Instead, it uses a set of commands (called “verbs”) that are built into HTTP and when the command arrives on the other end, it’s up to the receiving system to know what to do with it. For example, the HTTP verb that’s typically used to retrieve data is “GET”.  When HTTP is used to abstract systems from one another, the systems are considered to be more loosely coupled (when compared to web services) and therefore the entire system is considered less brittle. Another advantage of web APIs (often referred to as RESTful APIs) is flexibility. The client system (usually called the “consumer”) and the serving system (the “provider”) are so independent of one another, that they can each use different languages (Java, Python, Ruby, etc.) for their part of the overall implementation. Additionally, the data payloads can be of multiple types such as JSON or XML. RESTful APIs most typically use the web’s communication protocol (again, HTTP), but  are not limited in the same way a web service is. For example, CoAP, an HTTP-like protocol that’s common to the Internet of Things, is also considered to be RESTful.


What is an API?
In contrast, an API specifies how software components should interact with each other. It is a set of protocols and routines, and it’s responses are generally returned as JSON or XML data. APIs can use any type of communication protocol, and are not limited in the same way a web service is.
API stands for Application Programming Interface. It is an intermediate software agent that allows two or more applications to interact with each other.

What do APIs and web services have in common?
Both web APIs and web services serve as a means of communication between consumers and providers. Both support XML-based data payloads, but JSON is the more common payload type for web APIs. When comparing web services to web APIs, the significance lies in the amount of work that has to be done by the consumers and providers to package and unpackage the data; this is a process known as serialization and deserialization, respectively. Serializing and deserializing JSON in a web API scenario typically requires far less work which, in turn, equates to better performance and fewer compute cycles. This is one reason why web APIs are great for information transfer on mobile devices and tablets; as opposed to on desktops and services, where they have restricted processing environments.

Conversely, web services facilitate interactions between two systems, and almost always depend on an XML-RPC-like interface to communicate with each other. SOAP, the successor to XML-RPC, defines the XML-based exchange mentioned above and is more bound to a client/server architecture.

In terms of what web APIs and web services have in common, both are essentially a means to an end and the same problems can be solved by both. And both can be configured to operate over a network or within a machine.But the approaches of each come with their own pros and cons.  

For now, web services are a service from one device to another; they communicate over the Internet and are optimized for machine-to-machine communication, meaning that machine-readable files and formats (like XML) are easily transferable. APIs are software-to-software interfaces with an abstract set of verbs instructions for accessing web-based applications. Whatever you wanted to accomplish with a web API can be accomplished with a web service; web services are merely predecessors in the evolution of web integration methodologies.

ASP.NET Web API

ASP.NET Web API is a framework for building HTTP services that can be accessed from any client including browsers and mobile devices. It is an ideal platform for building RESTful applications on the . NET Framework.
n simple words, we can say that a web API is an application programming interface for a web application or web server. It uses HTTP protocol to communicate between clients and websites to have data access. 

Asp.net Core web API is a cross-platform web API.

Why is Web API required?
The user wants to access the application from different devices like mobile, browser, Google devices, etc. In this case, Web API can be useful. 

Different devices request to Web API and Web API will respond in JSON format. Most of the devices are able to understand JSON output. 



Minimal APIs are designed to create HTTP APIs with minimal dependencies. Minimal APIs are suitable for microservices and applications that include minimum files, features, and dependencies with ASP.NET Core. Minimal APIs were there since .NET 6 and it helps you to easily create API. It has included several improvements in performance, new features for C#11 &F#, .Net MAUI, ASP.NET Core/Blazor improvement, Web APIs, and many more. Additionally, you can easily containerize your .NET 7 projects as well as configure CI/CD workflows for GitHub actions. 
Moreover, .NET MAUI is a part of the .NET 7. .NET 7 is officially supported by Microsoft for only 18 months, and it is labeled as Standard term support.



By Default Weather Api executed and displays output using Swagger. I hope you are aware of Swagger. 

Simply put, Swagger is open-source software tool to design, build, document, and use RESTful Web API.

Web API is mostly used for CRED (Create, Read, EDIT, DELETE) operations. It  follows HTTP verbs for these operations.

HTTP GET – Read Operation
HTTP POST – Create Operation
HTTP PUT – Update Operation
HTTP DELETE – Delete Operation


	